routingOperations = ${routingOperations} [
  {
    operationId = content-get
    handlers = [
      {
        name = cookieHandler
      }
      {
        name = bodyHandler
      }
      {
        name = requestContextHandler
      }
      {
        name = httpRepoConnectorHandler
        config = { include required(classpath("routes/handlers/httpRepoConnectorHandler.conf")) }
      }
      {
        name = splitterHandler
      }
      {
        name = fragmentsHandler
        config = { include required(classpath("routes/handlers/fragmentsHandler.conf")) }
      }
      {
        name = assemblerHandler
      }
      {
        name = headerHandler
        # Statically defined HTTP response header returned to the client in every HTTP response
        config {
          name = X-Server
          value = Knot.x-Custom-Header
        }
      }
      {
        name = writerHandler
        # List of HTTP response headers Knot.x can return to the client
        config.allowedResponseHeaders = [
          Access-Control-Allow-Origin
          Content-Type
          Content-Length
        ]
      }
    ]
  }
  {
    operationId = assets-get
    handlers = [
      {
        name = cookieHandler
      }
      {
        name = bodyHandler
      }
      {
        name = requestContextHandler
      }
      {
        name = httpRepoConnectorHandler
        config = { include required(classpath("routes/handlers/httpRepoConnectorHandler.conf")) }
      }
      {
        name = headerHandler
        # Statically defined HTTP response header returned to the client in every HTTP response
        config {
          name = X-Server
          value = Knot.x-Custom-Header
        }
      }
      {
        name = writerHandler
        # List of HTTP response headers Knot.x can return to the client
        config.allowedResponseHeaders = [
          Access-Control-Allow-Origin
          Content-Type
          Content-Length
        ]
      }
    ]
  }
  {
    operationId = not-supported
    handlers = [
      # ToDo add hanlders here
    ]
  }
]
